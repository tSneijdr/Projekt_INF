package tier_1;

import java.util.ArrayList;

import core.Point;
import utils.Range2D;

public class Quadtree {
	private final QuadtreeNode root;

	public final Range2D RANGE;

	public Quadtree(Range2D r, int maxNumElements) {
		RANGE = r;

		root = new QuadtreeNode(maxNumElements, r);
	}

	public void add(Point p) {
		root.add(p);
	}

	private class QuadtreeNode {
		private QuadtreeNode NW = null, NE = null, SW = null, SE = null;
		private final int maxNumElements;
		private final ArrayList<Point> points;
		public final Range2D range;

		public QuadtreeNode(int maxNumberOfElements, Range2D range) {
			this.maxNumElements = maxNumberOfElements;
			this.range = range;

			points = new ArrayList<Point>();
		}

		/**
		 * Fügt dem Knoten einen neuen Punkt zu. Falls der Knoten Unterknoten
		 * hat wird auch dem entsprechenden Unterknoten der Punkt zugefügt
		 * 
		 * @param p
		 */
		public void add(Point p) {
			if (!points.contains(p)) {
				points.add(p);
			}

			// Weitergeben an Unterbäume falls diese existieren
			if (NE != null && NW != null && SE != null && SW != null) {
				// Falls der letzte Punkt den Knoten voll gemacht hat wird
				// gesplittet
				if (points.size() > maxNumElements) {
					initializeSubtrees();
				}

				if (NW.range.inRange(p)) {
					NW.add(p);
				} else if (NE.range.inRange(p)) {
					NE.add(p);
				} else if (SW.range.inRange(p)) {
					SW.add(p);
				} else if (SE.range.inRange(p)) {
					SE.add(p);
				}
			}
		}

		/**
		 * Initialisiert alle Unterbäume mit den entsprechenden Ranges
		 */
		private void initializeSubtrees() {
			// nur ausführen wenn eine Aufteilung des Nodes notwendig und noch
			// nicht geschehen ist
			if (points.size() > maxNumElements && NW == null && NE == null
					&& SE == null && SW == null) {
				int midX = range.MIN_X + (range.WIDTH / 2);
				int midY = range.MIN_Y + (range.HEIGHT / 2);

				// initialisiere die neuen Rangen
				Range2D nwRange = new Range2D(range.MIN_X,
						(range.MIN_X + midX), (range.MIN_Y + midY), range.MAX_Y);
				Range2D neRange = new Range2D((range.MIN_X + midX),
						range.MAX_X, (range.MIN_Y + midY), range.MAX_Y);
				Range2D swRange = new Range2D(range.MIN_X,
						(range.MIN_X + midX), range.MIN_Y, (range.MIN_Y + midY));
				Range2D seRange = new Range2D((range.MIN_X + midX),
						range.MAX_X, range.MIN_Y, (range.MIN_Y + midY));

				// initialisiere die neuen QuadtreeNodes
				NW = new QuadtreeNode(maxNumElements, nwRange);
				NE = new QuadtreeNode(maxNumElements, neRange);
				SW = new QuadtreeNode(maxNumElements, swRange);
				SE = new QuadtreeNode(maxNumElements, seRange);

				// Fügt Punkte erneut hinzu, so dass sie an Unternäume übergeben
				// werden
				for (Point p : points) {
					add(p);
				}
			}
		}
	}
}
