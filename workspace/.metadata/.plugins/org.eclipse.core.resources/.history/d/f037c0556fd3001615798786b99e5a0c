package loader;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import core.Point;

public class Caster {
	public Caster() {

	}

	public static List<String[]> toList(Point point) {
		if (point == null)
			return null;

		while (point.getPreviousNode() != null) {
			point = point.getPreviousNode();
		}

	}

	public static Point toPoint(List<String[]> pointList) {
		if (pointList == null || pointList.size() == 0)
			return null;
		
		for (String[] st : pointList){
			if (st.length != 4) throw new IllegalArgumentException("Einer der übergebenen Arrays hat eine illegale Länge");
		}

		LinkedList<Point> set = new LinkedList<Point>();
		for (String[] st : pointList) {
			int x, y;
			double timepoint, duration;
			// Caste die Stringliste in einen Point
			try {
				x = Integer.parseInt(st[0]);
				y = Integer.parseInt(st[1]); 
				timepoint = Double.parseDouble(st[2]);
				duration = Double.parseDouble(st[3]);
			} catch (Exception e) {
				e.printStackTrace();
				throw new IllegalArgumentException(
						"Beim Casten der Liste zu einem Punkt ist ein Fehler aufgetreten");
			}

			Point p = new Point(x, y, timepoint, duration);

			// Fügt Point dem Set hinzu
			set.add(p);
		}

		// Verlinkt die Punkte aufeinander
		Point p = Point.link(set);

		return p;

	}
}
